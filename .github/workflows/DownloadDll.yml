name: Download Original Dll files

on:
  workflow_dispatch:
    inputs:
      arch:
        description: 'Arch'
        required: true
        type: choice
        options:
          - x64
          - arm64
      version:
        description: 'Version(e.g. 22H2)'
        required: false
        type: string
      build:
        description: 'Build(e.g. 22621)'
        required: true
        type: string
      url:
        description: 'Download URL'
        required: true
        type: string
      format:
        description: 'File Format'
        required: true
        type: choice
        options:
          - .iso
          - .zip
          - .vhdx
        default: .iso
      upload:
        description: 'Upload'
        required: true
        type: boolean
        default: false

env:
  ARCH: ${{ inputs.arch }}
  VERSION: ${{ inputs.version }}
  BUILD: ${{ inputs.build }}
  URL: ${{ inputs.url }}
  FORMAT: ${{ inputs.format }}
  UPLOAD: ${{ inputs.upload }}
  python-version: '3.10'

jobs:
  download:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          sudo modprobe nbd max_part=8
          sudo apt update
          sudo apt install -y qemu-kvm wimtools unzip wget

      - name: Download
        run: |
          echo "Arch: $ARCH"
          echo "Version: $VERSION"
          echo "Build: $BUILD"
          echo "Download URL: $URL"
          echo "Format: $FORMAT"
          mkdir original_dll/$ARCH/$BUILD\
          mkdir tmp
          cd tmp
          wget "$URL" -o "Windows$FORMAT"
        
      - name: VHDX
        if: env.FORMAT == '.vhdx'
        run: |
          cd tmp
          sudo qemu-nbd -c /dev/nbd7 Windows.vhdx
          sudo fdisk -l /dev/nbd7
          mkdir Windows
          sudo mount $(python3 scripts/DownloadDll_vhdx.py $(ls /dev/nbd7*)) Windows
          cp Windows/Windows/System32/icu.dll ../original_dll/$ARCH/$BUILD
          cp Windows/Windows/System32/winhttp.dll ../original_dll/$ARCH/$BUILD
        
      - name: ISO
        if: env.FORMAT == '.iso'
        run: |
          cd tmp
          mkdir iso
          sudo mount -o loop Windows.iso iso
      
      - name: ZIP
        if: env.FORMAT == '.zip'
        run: |
          cd tmp
          mkdir zip
          unzip Windows.zip

      - name: Delete tmp
        run: rm -rf tmp
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: original_dll
          path: original_dll

      - name: commit
        if: env.UPLOAD == true
        run: |
          git config --global user.email 1169942595@qq.com
          git config --global user.name A-JiuA
          git add original_dll/$ARCH/$BUILD
          git commit -m "Upload original dlls from $VERSION $ARCH (build $BUILD)"
          
      - name: Push changes
        if: env.UPLOAD == true
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
