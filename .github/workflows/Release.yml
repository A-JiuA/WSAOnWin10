name: Release

on:
  workflow_dispatch:

jobs:
  check:
    name: Check Update
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        run: git clone https://github.com/LSPosed/MagiskOnWSALocal.git
      - name: Get Latest Version
        id: get
        run: |
          export WSA_WORK_ENV="ENV"
          cd MagiskOnWSALocal/scripts
          touch ENV
          result=$(python3 generateWSALinks.py x64 WIF download wsa.zip | grep "WSA Build Version")
          echo ${result// /_} >> "$GITHUB_OUTPUT"
      - name: Get Latest Release
        id: get_latest_release
        uses: joutvhu/get-release@v1
        with:
          latest: true
          prerelease: true
      - name: Check Update
        run: |
          echo ${{steps.get.outputs.WSA_Build_Version}}
          echo ${{ steps.get_latest_release.outputs.tag_name }}
  build:
    name: Build WSA
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ['x64', 'arm64']
        root-sol: ['none', 'magisk']
        gapps-brand: ['none', 'MindTheGapps']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clone Repository
        run: git clone https://github.com/LSPosed/MagiskOnWSALocal.git

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          check-latest: true
          python-version: '3.x'
          cache: 'pip'
        
      - name: Install Dependencies
        run: |
          pip3 install -r MagiskOnWSALocal/scripts/requirements.txt
          sudo apt update
          sudo apt install -y 7zip lzip patchelf e2fsprogs python3 aria2 attr unzip whiptail qemu-utils p7zip-full python3-venv wine winetricks

      - name: Build WSA ${{ matrix.arch }} With ${{ matrix.root-sol }} ROOT and ${{ matrix.gapps-brand }} GAPPS
        run: |
          ./MagiskOnWSALocal/scripts/build.sh --release-type WIF --remove-amazon --arch ${{ matrix.arch }} --root-sol ${{ matrix.root-sol }} --gapps-brand ${{ matrix.gapps-brand }}
          cp DLLs/${{ matrix.arch }}/*.dll MagiskOnWSALocal/output/*/WsaClient/

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.arch }}_${{ matrix.root-sol }}_${{ matrix.gapps-brand }} 
          path: MagiskOnWSALocal/output

  make-pri:
    name: Merge language resource
    runs-on: windows-latest
    needs: build
    strategy:
      matrix:
        arch: ['x64', 'arm64']
        root-sol: ['none', 'magisk']
        gapps-brand: ['none', 'MindTheGapps']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          path: ./output/
          name: ${{ matrix.arch }}_${{ matrix.root-sol }}_${{ matrix.gapps-brand }} 

      - id: name
        shell: bash
        run: echo "foldername=$(ls output)" >> $GITHUB_OUTPUT

      - name: Copy makepri from WindowsSDK
        id: copy
        run: cp -Force "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\makepri.exe" "./output/${{ steps.name.outputs.foldername }}"

      - name: Merge language resource
        shell: pwsh
        run: |
          cd "./output/${{ steps.name.outputs.foldername }}"
          $ProcMakePri = Start-Process pwsh.exe -PassThru -NoNewWindow -Args "-ExecutionPolicy Bypass -File MakePri.ps1"
          $ProcMakePri.WaitForExit()

      - name: Compress Files
        run: |
          cd output
          7z a -tzip -mx9 -sdel -r "${{ steps.name.outputs.foldername }}.zip" "${{ steps.name.outputs.foldername }}"

      - name: Remove unused artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ matrix.arch }}_${{ matrix.root-sol }}_${{ matrix.gapps-brand }}
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.name.outputs.foldername }}
          path: output/${{ steps.name.outputs.foldername }}.zip

  upload:
    needs: make-pri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          path: ./output/

      - name: Get Latest Release
        id: get_latest_release
        uses: joutvhu/get-release@v1
        with:
          latest: true
          prerelease: true
      
      - name: Generate Release Files
        id: generate_release_files
        env:
          LATEST_TAG: ${{ steps.get_latest_release.outputs.tag_name }}
        run: |
          mkdir release
          mv output/*/*.zip release/
          cd release
          python3 generate_release.py
        
      - name: test
        run: |
          echo ${{ steps.generate_release_files.outputs.version }}
          echo ${{ steps.generate_release_files.outputs.filename0 }}
          echo ${{ steps.generate_release_files.outputs.filename7 }}

      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   if: steps.get_latest_release.outputs.tag_name == ${{ steps.generate_release_files.outputs.version }}
      #   with:
      #     body_path: ${{ github.workspace }}-CHANGELOG.txt
      #   env:
      #     GITHUB_REPOSITORY: my_gh_org/my_gh_repo